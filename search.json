[{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Balamuta. Author, maintainer.","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Balamuta J (2024). Rcpp2doParallel: Calling Rcpp function doParallel. R package version 0.0.0.9000, https://rd-rcpp.thecoatlessprofessor.com/rcpp--doparallel/, https://github.com/coatless-rd-rcpp/rcpp--doparallel.","code":"@Manual{,   title = {Rcpp2doParallel: Calling an Rcpp function with doParallel},   author = {James Balamuta},   year = {2024},   note = {R package version 0.0.0.9000, https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/},   url = {https://github.com/coatless-rd-rcpp/rcpp-and-doparallel}, }"},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/index.html","id":"calling-an-rcpp-function-with-a-doparallel-backend","dir":"","previous_headings":"","what":"Calling an Rcpp function with doParallel","title":"Calling an Rcpp function with doParallel","text":"Rcpp2doParallel R package provides example providing C++ function parallelization call R C++ function using doParallel foreach backend. said, * backends – doFuture, doMC, doMPI,doRedis, doRNG, doSNOW – can substituted doParallel backend used driving example .","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Calling an Rcpp function with doParallel","text":"install package, must first compiler system compatible R. help obtaining compiler consult either macOS Windows guides. compiler hand, one can install package GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"r-pkg-examples/rcpp-and-doparallel\") library(\"Rcpp2doParallel\")"},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/index.html","id":"implementation-details","dir":"","previous_headings":"","what":"Implementation Details","title":"Calling an Rcpp function with doParallel","text":"Within project, C++ function created using Rcpp used doParallel region within R package. packaging C++ function, cost parallelizing code decreased worker parallelization setup compile code locally able execute . Moreover, packing parallelization code, deployment algorithm done using R’s package management instead monolithic R script.","code":". ├── DESCRIPTION                      # Package metadata ├── LICENSE                          # Code license ├── NAMESPACE                        # Function and dependency registration ├── R                                # R functions │   ├── Rcpp2doParallel-package.R    # Package documentation │   ├── RcppExports.R                # Autogenerated R to C++ bindings by Rcpp │   └── mean_parallel_compute.R      # doParallel cluster formation and C++ call ├── README.md ├── Rcpp2doParallel.Rproj ├── man                              # Package Documentation │   ├── Rcpp2doParallel-package.Rd │   └── mean_parallel_compute.Rd └── src                              # Compiled Code     ├── RcppExports.cpp              # Autogenerated R Bindings     └── mean_rcpp.cpp                # Construct a C++ function to comupte mean."},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/index.html","id":"r-function","dir":"","previous_headings":"","what":"R Function","title":"Calling an Rcpp function with doParallel","text":"Parallelized R functions require cluster set workers setup underlying jobs parallelization region distributed . approach taken self-contains setup execution parallel workers. encapsulating options within function, higher runtime cost subsequent function calls cluster must setup . alternative approach pass initialized cluster function. constructing parallelized region foreach, one must: Startup cluster cl = parallel::startCluster(n_workers) case doParallel, doParallel::registerDoParallel(cl). Pay close attention variables packages must exported. Supply data using foreach(..., .packages = c(\"pkgA\", \"pkgB\"), .export = c(\"var1\", \"var2\")) example, Rcpp2doParallel loaded worker using foreach(..., .packages = \"Rcpp2doParallel\") Alternatively, define handler end function stops cluster .exit(parallel::stopCluster(cl)) Return results estimation.","code":"mean_parallel_compute = function(n, mean = 0, sd = 1,                                  n_sim = 1000,                                  n_cores = parallel::detectCores()) {    # Construct cluster   cl = parallel::makeCluster(n_cores)    # After the function is run, shutdown the cluster.   on.exit(parallel::stopCluster(cl))    # Register parallel backend   doParallel::registerDoParallel(cl)   # Modify with any do*::registerDo*()    # Compute estimates   estimates = foreach::foreach(i = iterators::icount(n_sim), # Perform n simulations                                .combine = \"rbind\",           # Combine results                                                              # Self-load                                .packages = \"Rcpp2doParallel\") %dopar% {     random_data = rnorm(n, mean, sd)      result = mean_rcpp(random_data) # or use Rcpp2doParallel::mean_rcpp()     result   }    # Release results   return(estimates) }"},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/index.html","id":"c-function-construction","dir":"","previous_headings":"","what":"C++ Function Construction","title":"Calling an Rcpp function with doParallel","text":"C++ function must placed within package’s src/ directory exported R Rcpp Attributes. Outside two requirements, nothing else must done parallelization handled R within C++ code.","code":"#include <Rcpp.h>  // [[Rcpp::export]] double mean_rcpp(Rcpp::NumericVector x){   int n = x.size(); // Size of vector   double sum = 0;   // Sum value    // For loop, note cpp index shift to 0   for(int i = 0; i < n; i++){     // Shorthand for sum = sum + x[i]     sum += x[i];   }    return sum/n;  // Obtain and return the Mean }"},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/index.html","id":"description","dir":"","previous_headings":"","what":"DESCRIPTION","title":"Calling an Rcpp function with doParallel","text":"use doParallel backend many dependencies required depending features wish use. particular, doParallel package requires foreach parallel operate. iterators can removed dependency list sufficient RAM allocate index values, e.g. 1:n, instead creating low cost iterator n elements iterators::icount().","code":"LinkingTo:      Rcpp Imports:      doParallel,     Rcpp,     foreach,     iterators,     parallel"},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/index.html","id":"namespace","dir":"","previous_headings":"","what":"NAMESPACE","title":"Calling an Rcpp function with doParallel","text":"discussed DESCRIPTION, doParallel() backend dependencies. following functions must imported package order successfully run.","code":"#' @importFrom foreach %dopar% foreach #' @importFrom iterators icount #' @importFrom doParallel registerDoParallel"},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"Calling an Rcpp function with doParallel","text":"James Joseph Balamuta","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Calling an Rcpp function with doParallel","text":"GPL (>= 2)","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/reference/Rcpp2doParallel-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Rcpp2doParallel: Calling an Rcpp function with doParallel — Rcpp2doParallel-package","title":"Rcpp2doParallel: Calling an Rcpp function with doParallel — Rcpp2doParallel-package","text":"Provides example implementation using package house C++ function parallelization routine.","code":""},{"path":[]},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/reference/Rcpp2doParallel-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rcpp2doParallel: Calling an Rcpp function with doParallel — Rcpp2doParallel-package","text":"Maintainer: James Balamuta balamut2@illinois.edu","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/reference/mean_parallel_compute.html","id":null,"dir":"Reference","previous_headings":"","what":"Call an Rcpp function within a doParallel call — mean_parallel_compute","title":"Call an Rcpp function within a doParallel call — mean_parallel_compute","text":"Constructs example showing use foreach, iterators, doParallel perform parallel computation C++ function written using Rcpp.","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/reference/mean_parallel_compute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call an Rcpp function within a doParallel call — mean_parallel_compute","text":"","code":"mean_parallel_compute(   n,   mean = 0,   sd = 1,   n_sim = 1000,   n_cores = parallel::detectCores() )"},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/reference/mean_parallel_compute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call an Rcpp function within a doParallel call — mean_parallel_compute","text":"n Number Observations mean Center Normal Distribution sd Standard Deviation Normal Distribution n_sim Number Simulations Run n_cores Number CPU cores use parallelization task.","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/reference/mean_parallel_compute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call an Rcpp function within a doParallel call — mean_parallel_compute","text":"vector length n_sim containing mean distribution.","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/reference/mean_parallel_compute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Call an Rcpp function within a doParallel call — mean_parallel_compute","text":"mean_parallel_compute() function performs bootstrap computation parallel mean value normal distribution.","code":""},{"path":"https://rd-rcpp.thecoatlessprofessor.com/rcpp-and-doparallel/reference/mean_parallel_compute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call an Rcpp function within a doParallel call — mean_parallel_compute","text":"","code":"# Compute the mean on 1000 observations with 50 replications across # 2 CPUs. mean_parallel_compute(1000, n_sim = 50, n_cores = 2) #>                    [,1] #> result.1  -0.0382227351 #> result.2   0.0175640263 #> result.3  -0.0031693617 #> result.4  -0.0294290384 #> result.5  -0.0475833715 #> result.6  -0.0017675815 #> result.7  -0.0013198371 #> result.8   0.0018643164 #> result.9   0.0099135244 #> result.10  0.0069427795 #> result.11 -0.0198964325 #> result.12  0.0169600905 #> result.13  0.0276053127 #> result.14  0.0352570315 #> result.15 -0.0062964592 #> result.16  0.0265083221 #> result.17  0.0007933019 #> result.18  0.0167588181 #> result.19 -0.0106756039 #> result.20 -0.0837588237 #> result.21  0.0396804132 #> result.22  0.0587824692 #> result.23  0.0354617554 #> result.24 -0.0568306561 #> result.25 -0.0067532291 #> result.26  0.0045832939 #> result.27 -0.0249538461 #> result.28 -0.0235042564 #> result.29 -0.0564515114 #> result.30  0.0452349411 #> result.31 -0.0015438869 #> result.32  0.0626669064 #> result.33 -0.0046249876 #> result.34  0.0116040449 #> result.35  0.0356202926 #> result.36 -0.0212270698 #> result.37 -0.0089656852 #> result.38  0.0223898616 #> result.39  0.0041604304 #> result.40 -0.0087430856 #> result.41  0.0234387442 #> result.42 -0.0228969288 #> result.43  0.0464021609 #> result.44  0.0126897430 #> result.45 -0.0177316694 #> result.46 -0.0191212452 #> result.47 -0.0132761246 #> result.48 -0.0220821433 #> result.49 -0.0085231496 #> result.50 -0.0245882887"}]
